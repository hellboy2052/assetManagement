// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RookieOnlineAssetManagement.Data;

namespace RookieOnlineAssetManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210518065433_CategoryProperty_ReturningTable_Removed")]
    partial class CategoryProperty_ReturningTable_Removed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "52fb17f4-429d-4a59-b3a8-5c164f29db6b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "staff",
                            ConcurrencyStamp = "097cafa2-3623-4b72-9874-f330a712c6bc",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Location",
                            ClaimValue = "HN",
                            UserId = "adminhn"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Location",
                            ClaimValue = "HCM",
                            UserId = "adminhcm"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Location",
                            ClaimValue = "HN",
                            UserId = "userhn1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Location",
                            ClaimValue = "HCM",
                            UserId = "userhcm"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Location",
                            ClaimValue = "HN",
                            UserId = "userhn2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "adminhn",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "adminhcm",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "userhn1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "userhcm",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "userhn2",
                            RoleId = "staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DoB");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("IncrementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)")
                        .HasComputedColumnSql("N'SD'+ RIGHT('0000'+CAST(IncrementId AS VARCHAR(4)),4)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "adminhn",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6689abee-2b43-4005-a9f5-ac5f2ec8bda1",
                            DateOfBirth = new DateTime(1999, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "An",
                            Gender = true,
                            IncrementId = 1,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2019, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Thuy",
                            Location = "HN",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKHolW871qvaZyhjt/QKIi7QZJOqdVCqnUUje5Bv2E+zHpipEqe8NsKGxfb0ZD3sPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff5e9b8f-c940-497c-b253-c081129558fc",
                            StaffCode = "SD0001",
                            TwoFactorEnabled = false,
                            Type = "Admin",
                            UserName = "adminhn"
                        },
                        new
                        {
                            Id = "adminhcm",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41c6a099-2e8d-4241-820b-f125de7dd602",
                            DateOfBirth = new DateTime(1993, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "An",
                            Gender = false,
                            IncrementId = 2,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2019, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Tran Van",
                            Location = "HCM",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINHCM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDGVooxKA+pSaQ6Nfgnx+/tbEpE/RFf5MgrKPKYXU25I5hzv+53p/Xh/+RDGeqcl0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c7821e8-8fe2-4f01-b684-839d762e4708",
                            StaffCode = "SD0002",
                            TwoFactorEnabled = false,
                            Type = "Admin",
                            UserName = "adminhcm"
                        },
                        new
                        {
                            Id = "userhn1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1f082e3-3f52-4a75-9e27-9e4964d041ad",
                            DateOfBirth = new DateTime(1996, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Toai",
                            Gender = false,
                            IncrementId = 3,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = true,
                            JoinedDate = new DateTime(2018, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Van",
                            Location = "HN",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINHNT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOApnBHh7cv06cocZpmY7JGYmW0cAWiHus8mv66HeG5eR/u071M1984POQFztxNEAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a41b7ba3-45de-4f4d-9a6f-1d991de9a68c",
                            StaffCode = "SD0003",
                            TwoFactorEnabled = false,
                            Type = "Staff",
                            UserName = "binhnt"
                        },
                        new
                        {
                            Id = "userhcm",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ac5db34-132e-435e-bf21-a628a2a2bd46",
                            DateOfBirth = new DateTime(1996, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Binh",
                            Gender = true,
                            IncrementId = 4,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2018, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Van",
                            Location = "HCM",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINHNV",
                            PasswordHash = "AQAAAAEAACcQAAAAELBYpUjWX63mFvv+f4Z+UR0KGjoy+ctKw5sxGMLg+voiio70m5YZQf8WisxJeRHAzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eda866b4-4ff6-4ed1-b65f-2b8c66df6b9b",
                            StaffCode = "SD0004",
                            TwoFactorEnabled = false,
                            Type = "Staff",
                            UserName = "binhnv"
                        },
                        new
                        {
                            Id = "userhn2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5c8503d-af7b-4c9a-a524-d295f02c52dd",
                            DateOfBirth = new DateTime(1996, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Binh",
                            Gender = true,
                            IncrementId = 5,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2018, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Vo Nguyen",
                            Location = "HN",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINHNV1",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7PTNakReiYBou+4cEvBEV2FN59oIYTXnT8uCOHIesyCJc6uwtt9uTfPvlWO8FWyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "026677a1-8fe7-4147-bebd-343ffeed4430",
                            StaffCode = "SD0005",
                            TwoFactorEnabled = false,
                            Type = "Staff",
                            UserName = "binhnv1"
                        });
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Asset", b =>
                {
                    b.Property<string>("AssestCode")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)");

                    b.Property<string>("AssestName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssestCode");

                    b.HasIndex("CategoryId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssestCode = "LA000000",
                            AssestName = "Lenovo Thinkpad T440p",
                            CategoryId = "LA",
                            InstallDate = new DateTime(2014, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HCM",
                            Specification = "This is a simple Specification from HCM"
                        },
                        new
                        {
                            AssestCode = "LA000001",
                            AssestName = "Lenovo Thinkpad X240",
                            CategoryId = "LA",
                            InstallDate = new DateTime(2014, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HN",
                            Specification = "This is a simple Specification from HN"
                        },
                        new
                        {
                            AssestCode = "LA000002",
                            AssestName = "Lenovo Thinkpad T440p",
                            CategoryId = "LA",
                            InstallDate = new DateTime(2016, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HN",
                            Specification = "This is a simple Specification from HN"
                        },
                        new
                        {
                            AssestCode = "PC000000",
                            AssestName = "PC GTX 2060",
                            CategoryId = "PC",
                            InstallDate = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HCM",
                            Specification = "This is a simple Specification from HCM"
                        },
                        new
                        {
                            AssestCode = "PC000001",
                            AssestName = "PC GTX 1060",
                            CategoryId = "PC",
                            InstallDate = new DateTime(2018, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HCM",
                            Specification = "This is a simple Specification from HCM"
                        },
                        new
                        {
                            AssestCode = "PC000002",
                            AssestName = "PC GTX 660",
                            CategoryId = "PC",
                            InstallDate = new DateTime(2010, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HN",
                            Specification = "This is a simple Specification from HN"
                        });
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Assignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssetCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("char(8)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("AssetCode")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasFilter("[CategoryName] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "LA",
                            CategoryName = "Laptop"
                        },
                        new
                        {
                            CategoryId = "PC",
                            CategoryName = "Personal Computer"
                        });
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Returning", b =>
                {
                    b.Property<string>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(8)");

                    b.Property<string>("AssetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReturnId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("RequestById");

                    b.ToTable("Returning");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Asset", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Assignment", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("RookieOnlineAssetManagement.Entities.Asset", "Asset")
                        .WithOne("Assignment")
                        .HasForeignKey("RookieOnlineAssetManagement.Entities.Assignment", "AssetCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Admin");

                    b.Navigation("Asset");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Returning", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById");

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "RequestBy")
                        .WithMany()
                        .HasForeignKey("RequestById");

                    b.HasOne("RookieOnlineAssetManagement.Entities.Asset", "Asset")
                        .WithOne("Returning")
                        .HasForeignKey("RookieOnlineAssetManagement.Entities.Returning", "ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedBy");

                    b.Navigation("RequestBy");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Asset", b =>
                {
                    b.Navigation("Assignment");

                    b.Navigation("Returning");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Category", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
