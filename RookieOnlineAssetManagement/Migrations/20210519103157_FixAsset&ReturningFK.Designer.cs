// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RookieOnlineAssetManagement.Data;

namespace RookieOnlineAssetManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210519103157_FixAsset&ReturningFK")]
    partial class FixAssetReturningFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "05235e97-439f-404f-b415-8556db156057",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "staff",
                            ConcurrencyStamp = "97faa808-0dcb-4ecd-a095-f196d6504907",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Location",
                            ClaimValue = "HN",
                            UserId = "adminhn"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Location",
                            ClaimValue = "HCM",
                            UserId = "adminhcm"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Location",
                            ClaimValue = "HN",
                            UserId = "userhn1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Location",
                            ClaimValue = "HCM",
                            UserId = "userhcm"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Location",
                            ClaimValue = "HN",
                            UserId = "userhn2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "adminhn",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "adminhcm",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "userhn1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "userhcm",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "userhn2",
                            RoleId = "staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DoB");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComputedColumnSql("[FirstName] + ' ' + [LastName]");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("IncrementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)")
                        .HasComputedColumnSql("N'SD'+ RIGHT('0000'+CAST(IncrementId AS VARCHAR(4)),4)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "adminhn",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c9b0b09-5d9c-4cf4-82c9-e4c51a5ab5ee",
                            DateOfBirth = new DateTime(1999, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "An",
                            Gender = true,
                            IncrementId = 1,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2019, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Thuy",
                            Location = "HN",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFlUUY4QEfdSIcGEt1esBqIfzcD8e10zLbpvJquQ48MpbuymVklCVm6sQE7uDbsTwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56974b86-8de3-4938-b229-9c4e2c11ecea",
                            StaffCode = "SD0001",
                            TwoFactorEnabled = false,
                            Type = "Admin",
                            UserName = "adminhn"
                        },
                        new
                        {
                            Id = "adminhcm",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9ca0f96-332d-44bc-b2b6-2fb850d651b1",
                            DateOfBirth = new DateTime(1993, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "An",
                            Gender = false,
                            IncrementId = 2,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2019, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Tran Van",
                            Location = "HCM",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINHCM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJEnJcA/wcQY0tUXdBIrWGfZZ3ftJAtrhInOd+ribh3KhtSUrHSJSQa8WADU1u3m0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "098c87b5-07de-4a7b-a762-cab0140c8d63",
                            StaffCode = "SD0002",
                            TwoFactorEnabled = false,
                            Type = "Admin",
                            UserName = "adminhcm"
                        },
                        new
                        {
                            Id = "userhn1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0bc5a61-afe7-431e-aa47-5c58dba14415",
                            DateOfBirth = new DateTime(1996, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Toai",
                            Gender = false,
                            IncrementId = 3,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = true,
                            JoinedDate = new DateTime(2018, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Van",
                            Location = "HN",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINHNT",
                            PasswordHash = "AQAAAAEAACcQAAAAEIynXNaHe4QFh+Q3TAKiOoowzjkoNy88lSEO/xgvEkYhfl8oAS388SEVng7hBumZGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5f0bdf0-3b58-4abc-8ce2-769f0641162b",
                            StaffCode = "SD0003",
                            TwoFactorEnabled = false,
                            Type = "Staff",
                            UserName = "binhnt"
                        },
                        new
                        {
                            Id = "userhcm",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79f04cb2-4d4d-4930-9ca2-c7023e1a31f1",
                            DateOfBirth = new DateTime(1996, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Binh",
                            Gender = true,
                            IncrementId = 4,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2018, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nguyen Van",
                            Location = "HCM",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINHNV",
                            PasswordHash = "AQAAAAEAACcQAAAAEJsHQLT3Yg2K2E8zIqC6dpjfYhmPUrepnwygTctAz6nEDY67/raLBMCvy5Q9WlZbJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bb26442-a86f-4b84-ac83-17618d988e9e",
                            StaffCode = "SD0004",
                            TwoFactorEnabled = false,
                            Type = "Staff",
                            UserName = "binhnv"
                        },
                        new
                        {
                            Id = "userhn2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "796f2eed-ecb5-4fa5-bc1a-c6a39364b942",
                            DateOfBirth = new DateTime(1996, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Binh",
                            Gender = true,
                            IncrementId = 5,
                            IsAssigned = false,
                            IsDefaultPassword = true,
                            IsDisabled = false,
                            JoinedDate = new DateTime(2018, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Vo Nguyen",
                            Location = "HN",
                            LockoutEnabled = false,
                            NormalizedUserName = "BINHNV1",
                            PasswordHash = "AQAAAAEAACcQAAAAENQfA48RO2wV98cqqyPuKg8i3u7JXm8JjyrFALT80eR3KCZtO8kYjkvT6iMMb3Lziw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7eed561-426a-4e99-abcc-8f1a3b880465",
                            StaffCode = "SD0005",
                            TwoFactorEnabled = false,
                            Type = "Staff",
                            UserName = "binhnv1"
                        });
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Asset", b =>
                {
                    b.Property<string>("AssestCode")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)");

                    b.Property<string>("AssestName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssestCode");

                    b.HasIndex("CategoryId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssestCode = "LA000000",
                            AssestName = "Lenovo Thinkpad T440p",
                            CategoryId = "LA",
                            InstallDate = new DateTime(2014, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HCM",
                            Specification = "This is a simple Specification from HCM",
                            State = "Available"
                        },
                        new
                        {
                            AssestCode = "LA000001",
                            AssestName = "Lenovo Thinkpad X240",
                            CategoryId = "LA",
                            InstallDate = new DateTime(2014, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HN",
                            Specification = "This is a simple Specification from HN",
                            State = "Available"
                        },
                        new
                        {
                            AssestCode = "LA000002",
                            AssestName = "Lenovo Thinkpad T440p",
                            CategoryId = "LA",
                            InstallDate = new DateTime(2016, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HN",
                            Specification = "This is a simple Specification from HN",
                            State = "Recycled"
                        },
                        new
                        {
                            AssestCode = "PC000000",
                            AssestName = "PC GTX 2060",
                            CategoryId = "PC",
                            InstallDate = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HCM",
                            Specification = "This is a simple Specification from HCM",
                            State = "WaitingForRecycling"
                        },
                        new
                        {
                            AssestCode = "PC000001",
                            AssestName = "PC GTX 1060",
                            CategoryId = "PC",
                            InstallDate = new DateTime(2018, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HCM",
                            Specification = "This is a simple Specification from HCM",
                            State = "NotAvailable"
                        },
                        new
                        {
                            AssestCode = "PC000002",
                            AssestName = "PC GTX 660",
                            CategoryId = "PC",
                            InstallDate = new DateTime(2010, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAssigned = false,
                            Location = "HN",
                            Specification = "This is a simple Specification from HN",
                            State = "Assigned"
                        });
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Assignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssetCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("char(8)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("AssetCode")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasFilter("[CategoryName] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "LA",
                            CategoryName = "Laptop"
                        },
                        new
                        {
                            CategoryId = "PC",
                            CategoryName = "Personal Computer"
                        });
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Returning", b =>
                {
                    b.Property<string>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssetCode")
                        .HasColumnType("char(8)");

                    b.Property<string>("AssignedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("date");

                    b.Property<string>("RequestById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReturnedDate")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReturnId");

                    b.HasIndex("AssetCode")
                        .IsUnique()
                        .HasFilter("[AssetCode] IS NOT NULL");

                    b.HasIndex("AssignedById");

                    b.HasIndex("RequestById");

                    b.ToTable("Returning");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Asset", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Assignment", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("RookieOnlineAssetManagement.Entities.Asset", "Asset")
                        .WithOne("Assignment")
                        .HasForeignKey("RookieOnlineAssetManagement.Entities.Assignment", "AssetCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Admin");

                    b.Navigation("Asset");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Returning", b =>
                {
                    b.HasOne("RookieOnlineAssetManagement.Entities.Asset", "Asset")
                        .WithOne("Returning")
                        .HasForeignKey("RookieOnlineAssetManagement.Entities.Returning", "AssetCode");

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById");

                    b.HasOne("RookieOnlineAssetManagement.Entities.ApplicationUser", "RequestBy")
                        .WithMany()
                        .HasForeignKey("RequestById");

                    b.Navigation("Asset");

                    b.Navigation("AssignedBy");

                    b.Navigation("RequestBy");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Asset", b =>
                {
                    b.Navigation("Assignment");

                    b.Navigation("Returning");
                });

            modelBuilder.Entity("RookieOnlineAssetManagement.Entities.Category", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
